%x string
                                            // C++ style identifier
word            [_[:alpha:]][_[:alnum:]]*
                                            // C++ style integer literal
integral        [[:digit:]]+
                                            // C++ style double literal
real            [[:digit:]]*\.[[:digit:]]+

                                            // C++ operators
scope           ::
access          -\>|\.
math            \+|\-|\/|\*|%
logical         !|&&|\|\|
bitwise         &|~|\^|\|
shift           \>\>|\<\<
comp            \<=\>|\<|\<=|\>|\>=|==|!=
assign          ({math}|{shift}|{bitwise})?=
operator   {scope}|{access}|{math}|{logical}|{bitwise}|{shift}|{comp}|{assign}|,

                                          // C++ strings, with concat
                                          // spacing for strings that concat
concatSpacing   [[:space:]]{-}[\n]
stringPart      \".*\"
string          {stringPart}({concatSpacing}*{stringPart})*
                                          // C++ character constants
escChar         ['"?\\abfnrtv]
charConst       \'([[:alpha:]]|\\{escChar})\'
%%
{word}        return WORD;
{integral}    return INTEGRAL;
{real}        return REAL;
{operator}    return OPERATOR;
{string}      return STRING;
{charConst}   return CHARCONST;
.|\n          return matched()[0];
