// Generated by Flexc++ V2.11.00 on Sun, 19 Mar 2023 13:19:04 +0100

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "Scannerbase.h"

#include <stack>


// $insert classHead
class Scanner: public ScannerBase
{
    std::string beforeML;
    bool newLineInML = false;

    enum
    {
      LINE = 256
    };

    std::stack<StartCondition_> d_scStack;

    public:
        explicit Scanner(std::istream &in = std::cin, std::ostream &out = std::cout, bool keepCwd = true);

        Scanner(std::string const &infile, std::string const &outfile, bool keepCwd = true);
        
        // $insert lexFunctionDecl
        int lex();
        using ScannerBase::push;
    private:
        int lex_();
        int executeAction_(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum_ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.

        void push(StartCondition_ next);
        void popStartCondition();
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out, bool keepCwd)
:
    ScannerBase(in, out, keepCwd)
{}

inline Scanner::Scanner(std::string const &infile, std::string const &outfile, bool keepCwd)
:
    ScannerBase(infile, outfile, keepCwd)
{}

// $insert inlineLexFunction
inline int Scanner::lex()
{
    return lex_();
}

inline void Scanner::preCode() 
{
    // optionally replace by your own code
}

inline void Scanner::postCode([[maybe_unused]] PostEnum_ type) 
{
}

inline void Scanner::print() 
{
    print_();
}

// TODO: Make into own files

inline void Scanner::push(StartCondition_ next)
{
  d_scStack.push(startCondition()); // push the current SC.
  begin(next);                      // switch to the next
}

inline void Scanner::popStartCondition()
{
  begin(d_scStack.top());
  d_scStack.pop();
}


#endif // Scanner_H_INCLUDED_

