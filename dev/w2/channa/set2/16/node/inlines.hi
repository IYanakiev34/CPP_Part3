inline DLX::ColumnHeaderNode * const DLX::Node::control() const
{
    return static_cast<ColumnHeaderNode *>(d_control);
}

                                        // We insert to the nodes on the the
                                        // correct dimension inside other,
                                        // not other itself
inline void DLX::Node::insert_on_left(Node * const other)
{
    insert_back(*other, Horizontal);
}

inline void DLX::Node::insert_above(Node * const other)
{
    insert_back(*other, Vertical);
}

inline void DLX::Node::insert_on_right(Node * const other)
{
    insert_front(*other, Horizontal);
}

inline void DLX::Node::insert_below(Node * const other)
{
    insert_front(*other, Vertical);
}

inline DLX::Node * const DLX::Node::left() const
{
    return static_cast<Node*>(prev(Horizontal));
}

inline DLX::Node * const DLX::Node::right() const
{
    return static_cast<Node*>(next(Horizontal));
}

inline DLX::Node * const DLX::Node::up() const
{
    return static_cast<Node*>(prev(Vertical));
}

inline DLX::Node * const DLX::Node::down() const
{
    return static_cast<Node*>(next(Vertical));
}

// Multi-line functions inlined for convenience of swapping them in and out.

inline void DLX::Node::cover_lr() const
{
    cover(Horizontal);
}

inline void DLX::Node::uncover_lr()
{
    uncover(Horizontal);
}


inline void DLX::Node::cover_ud() const
{
    cover(Vertical);
    d_control->decrease_count();
}

inline void DLX::Node::uncover_ud()
{
    uncover(Vertical);
    d_control->increase_count();
}

inline void DLX::Node::cover_rest_of_row() const
{}

inline void DLX::Node::uncover_rest_of_row() const
{}


inline DLX::Node::Node(ColumnHeaderNode *control)
    :
    d_control(control)
{
                                    // Attach internal nodes to be circular
                                    // lists (that are independent)
    insert_back(*this, Horizontal);
    insert_front(*this, Horizontal);
    insert_back(*this, Vertical);
    insert_front(*this, Vertical);
    d_control->increase_count();
}
