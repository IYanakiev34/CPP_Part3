
inline void DLX::Node::cover_rest_of_row() const
{}

inline void DLX::Node::uncover_rest_of_row() const
{}
inline DLX::ColumnHeaderNode * const DLX::Node::control() const
{
    return static_cast<ColumnHeaderNode *>(d_control);
}

inline void DLX::Node::insert_on_left(Node * const other)
{
    d_left->insert_on_right(other);
}

inline void DLX::Node::insert_above(Node * const other)
{
    d_up->insert_below(other);
}

inline DLX::Node * const DLX::Node::left() const
{
    return d_left;
}

inline DLX::Node * const DLX::Node::right() const
{
    return d_right;
}

inline DLX::Node * const DLX::Node::up() const
{
    return d_up;
}

inline DLX::Node * const DLX::Node::down() const
{
    return d_down;
}

// Multi-line functions inlined for convenience of swapping them in and out.

inline void DLX::Node::cover_lr() const
{
    d_left->d_right = d_right;
    d_right->d_left = d_left;
}

inline void DLX::Node::uncover_lr()
{
    d_left->d_right = this;
    d_right->d_left = this;
}


inline void DLX::Node::cover_ud() const
{
    d_up->d_down = d_down;
    d_down->d_up = d_up;
    d_control->decrease_count();
}


inline void DLX::Node::uncover_ud()
{
    d_up->d_down = this;
    d_down->d_up = this;
    d_control->increase_count();
}


inline DLX::Node::Node(ColumnHeaderNode *control)
    : d_left(this)
    , d_right(this)
    , d_up(this)
    , d_down(this)
    , d_control(control)
{
    d_control->increase_count();
}

inline void DLX::Node::insert_below(Node * const other)
{
    // See insert_on_right for analogous ascii-art comment.
    Node * const prev = d_down;
    other->d_down = prev;
    prev->d_up = other;
    d_down = other;
    other->d_up = this;
}

inline void DLX::Node::insert_on_right(Node * const other)
{
    // 'prev' is short for 'prev_right'; Has nothing to do with prev/next.
    Node * const prev = d_right; //     this            other           prev
    other->d_right = prev; // 1        --------   3    --------   1    -------- 
    prev->d_left = other;  // 2       |  right | ---> |  right | ---> |  right | --->
    d_right = other;       // 3  <--- | left   | <--- | left   | <--- | left   |
    other->d_left = this;  // 4        --------   4    --------   2    -------- 
}
