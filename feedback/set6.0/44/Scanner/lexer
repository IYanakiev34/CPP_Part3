//JB: ?
//JB: Using an extra data member for the delimiter makes perfect sense.
//JB: But is it really necessary to have d_stringContent instead of just using
//JB: the matched text?
%x string rsl delim
word                    [[:graph:]]+
%%
                                    // Detected normal string
\"                      {
                          d_stringContent = "\""; //JB: Probably TC
                          begin(StartCondition_::string);
                        }
                                    // Detected RSL
R\"                     {
                          d_stringContent = "\"";
                          begin(StartCondition_::delim);
                        }

<delim>
{
  //JB: {word} == [[:graph:]]+. Does that mean the delimiter can contain doublequotes?
  {word}?\(               {
   		          //JB: This probably needs a function of its own.
                          d_delim = matched();
                                      // Remove '('
                          d_delim.pop_back();
                                      // Insert ')' which is used to denote end
                                      // of RSL
                          d_delim.insert(0, 1, ')');
                                      // Now parse RSL
                          begin(StartCondition_::rsl);
                        }

}
<rsl>
{
  \"                    {
                              // Check if we need to leave rsl by checking delim
                          if (d_stringContent.ends_with(d_delim))
                          {
			    //JB: This probably needs a function of its own.
                                // If so, remove )delim from content, add ending
                                // quote and return rsl
                            d_stringContent.erase(
                              d_stringContent.size() - d_delim.size()
                            );
                            d_stringContent.append("\"");

                            setMatched(d_stringContent);
                            begin(StartCondition_::INITIAL);
                            return STRING;
                          }
                          else
                                    // If not, add to d_stringContent and cont
                            d_stringContent.append("\"");
                        }

  .                     d_stringContent.append(matched());
}
<string>
{
                                  // If we can concat strings, skip quotes
                                  // intermediate spacing
  \"[[:space:]]*\"
                                  // If there is no further comments to
                                  // concat, return string
  \"                    {
                          begin(StartCondition_::INITIAL);
                          setMatched(d_stringContent.append("\""));
                          return STRING;
                        }
                                  // We caught a char inside a string
  .                     {
                          d_stringContent.append(matched());
                        }
}
                                    // Matched non-string input
(.|\n)                  return matched()[0];
